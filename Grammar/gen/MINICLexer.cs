//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Alexandros/RiderProjects/SimpleCompiler/Grammar/MINIC.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MINICLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INTEGER=1, DOUBLE=2, IF=3, ELSE=4, WHILE=5, RETURN=6, BREAK=7, PLUS=8, 
		MINUS=9, DIV=10, MULT=11, OR=12, AND=13, NOT=14, EQUAL=15, NEQUAL=16, 
		GT=17, LT=18, GTE=19, LTE=20, SEMICOLON=21, LP=22, RP=23, LCB=24, RCB=25, 
		COMMA=26, ASSIGN=27, IDENTIFIER=28, NUMBER=29, WS=30, COMMENT=31;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INTEGER", "DOUBLE", "IF", "ELSE", "WHILE", "RETURN", "BREAK", "PLUS", 
		"MINUS", "DIV", "MULT", "OR", "AND", "NOT", "EQUAL", "NEQUAL", "GT", "LT", 
		"GTE", "LTE", "SEMICOLON", "LP", "RP", "LCB", "RCB", "COMMA", "ASSIGN", 
		"IDENTIFIER", "NUMBER", "WS", "COMMENT"
	};


	public MINICLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MINICLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'double'", "'if'", "'else'", "'while'", "'return'", "'break'", 
		"'+'", "'-'", "'/'", "'*'", "'||'", "'&&'", "'!'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "';'", "'('", "')'", "'{'", "'}'", "','", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "DOUBLE", "IF", "ELSE", "WHILE", "RETURN", "BREAK", "PLUS", 
		"MINUS", "DIV", "MULT", "OR", "AND", "NOT", "EQUAL", "NEQUAL", "GT", "LT", 
		"GTE", "LTE", "SEMICOLON", "LP", "RP", "LCB", "RCB", "COMMA", "ASSIGN", 
		"IDENTIFIER", "NUMBER", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MINIC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MINICLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,31,182,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
		1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
		1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,
		1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,5,27,150,8,
		27,10,27,12,27,153,9,27,1,28,1,28,1,28,5,28,158,8,28,10,28,12,28,161,9,
		28,3,28,163,8,28,1,29,4,29,166,8,29,11,29,12,29,167,1,29,1,29,1,30,1,30,
		1,30,1,30,5,30,176,8,30,10,30,12,30,179,9,30,1,30,1,30,0,0,31,1,1,3,2,
		5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
		16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
		28,57,29,59,30,61,31,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
		97,122,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,186,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,67,1,0,0,0,5,74,
		1,0,0,0,7,77,1,0,0,0,9,82,1,0,0,0,11,88,1,0,0,0,13,95,1,0,0,0,15,101,1,
		0,0,0,17,103,1,0,0,0,19,105,1,0,0,0,21,107,1,0,0,0,23,109,1,0,0,0,25,112,
		1,0,0,0,27,115,1,0,0,0,29,117,1,0,0,0,31,120,1,0,0,0,33,123,1,0,0,0,35,
		125,1,0,0,0,37,127,1,0,0,0,39,130,1,0,0,0,41,133,1,0,0,0,43,135,1,0,0,
		0,45,137,1,0,0,0,47,139,1,0,0,0,49,141,1,0,0,0,51,143,1,0,0,0,53,145,1,
		0,0,0,55,147,1,0,0,0,57,162,1,0,0,0,59,165,1,0,0,0,61,171,1,0,0,0,63,64,
		5,105,0,0,64,65,5,110,0,0,65,66,5,116,0,0,66,2,1,0,0,0,67,68,5,100,0,0,
		68,69,5,111,0,0,69,70,5,117,0,0,70,71,5,98,0,0,71,72,5,108,0,0,72,73,5,
		101,0,0,73,4,1,0,0,0,74,75,5,105,0,0,75,76,5,102,0,0,76,6,1,0,0,0,77,78,
		5,101,0,0,78,79,5,108,0,0,79,80,5,115,0,0,80,81,5,101,0,0,81,8,1,0,0,0,
		82,83,5,119,0,0,83,84,5,104,0,0,84,85,5,105,0,0,85,86,5,108,0,0,86,87,
		5,101,0,0,87,10,1,0,0,0,88,89,5,114,0,0,89,90,5,101,0,0,90,91,5,116,0,
		0,91,92,5,117,0,0,92,93,5,114,0,0,93,94,5,110,0,0,94,12,1,0,0,0,95,96,
		5,98,0,0,96,97,5,114,0,0,97,98,5,101,0,0,98,99,5,97,0,0,99,100,5,107,0,
		0,100,14,1,0,0,0,101,102,5,43,0,0,102,16,1,0,0,0,103,104,5,45,0,0,104,
		18,1,0,0,0,105,106,5,47,0,0,106,20,1,0,0,0,107,108,5,42,0,0,108,22,1,0,
		0,0,109,110,5,124,0,0,110,111,5,124,0,0,111,24,1,0,0,0,112,113,5,38,0,
		0,113,114,5,38,0,0,114,26,1,0,0,0,115,116,5,33,0,0,116,28,1,0,0,0,117,
		118,5,61,0,0,118,119,5,61,0,0,119,30,1,0,0,0,120,121,5,33,0,0,121,122,
		5,61,0,0,122,32,1,0,0,0,123,124,5,62,0,0,124,34,1,0,0,0,125,126,5,60,0,
		0,126,36,1,0,0,0,127,128,5,62,0,0,128,129,5,61,0,0,129,38,1,0,0,0,130,
		131,5,60,0,0,131,132,5,61,0,0,132,40,1,0,0,0,133,134,5,59,0,0,134,42,1,
		0,0,0,135,136,5,40,0,0,136,44,1,0,0,0,137,138,5,41,0,0,138,46,1,0,0,0,
		139,140,5,123,0,0,140,48,1,0,0,0,141,142,5,125,0,0,142,50,1,0,0,0,143,
		144,5,44,0,0,144,52,1,0,0,0,145,146,5,61,0,0,146,54,1,0,0,0,147,151,7,
		0,0,0,148,150,7,1,0,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,
		151,152,1,0,0,0,152,56,1,0,0,0,153,151,1,0,0,0,154,163,5,48,0,0,155,159,
		7,2,0,0,156,158,7,3,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,
		0,159,160,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,162,154,1,0,0,0,162,
		155,1,0,0,0,163,58,1,0,0,0,164,166,7,4,0,0,165,164,1,0,0,0,166,167,1,0,
		0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,6,29,0,0,170,
		60,1,0,0,0,171,172,5,47,0,0,172,173,5,47,0,0,173,177,1,0,0,0,174,176,8,
		5,0,0,175,174,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,
		178,180,1,0,0,0,179,177,1,0,0,0,180,181,6,30,1,0,181,62,1,0,0,0,6,0,151,
		159,162,167,177,2,6,0,0,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
