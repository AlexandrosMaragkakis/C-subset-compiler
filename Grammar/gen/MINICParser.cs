//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Alexandros/RiderProjects/SimpleCompiler/Grammar/MINIC.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MINICParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INTEGER=1, DOUBLE=2, IF=3, ELSE=4, WHILE=5, RETURN=6, BREAK=7, PLUS=8, 
		MINUS=9, DIV=10, MULT=11, OR=12, AND=13, NOT=14, EQUAL=15, NEQUAL=16, 
		GT=17, LT=18, GTE=19, LTE=20, SEMICOLON=21, LP=22, RP=23, LCB=24, RCB=25, 
		COMMA=26, ASSIGN=27, IDENTIFIER=28, NUMBER=29, WS=30, COMMENT=31;
	public const int
		RULE_compileUnit = 0, RULE_declaration = 1, RULE_initializer = 2, RULE_functionDeclaration = 3, 
		RULE_functionDefinition = 4, RULE_typeSpecifier = 5, RULE_statement = 6, 
		RULE_localDeclaration = 7, RULE_ifStatement = 8, RULE_whileStatement = 9, 
		RULE_block = 10, RULE_statementList = 11, RULE_expression = 12, RULE_args = 13, 
		RULE_fargs = 14;
	public static readonly string[] ruleNames = {
		"compileUnit", "declaration", "initializer", "functionDeclaration", "functionDefinition", 
		"typeSpecifier", "statement", "localDeclaration", "ifStatement", "whileStatement", 
		"block", "statementList", "expression", "args", "fargs"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'double'", "'if'", "'else'", "'while'", "'return'", "'break'", 
		"'+'", "'-'", "'/'", "'*'", "'||'", "'&&'", "'!'", "'=='", "'!='", "'>'", 
		"'<'", "'>='", "'<='", "';'", "'('", "')'", "'{'", "'}'", "','", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INTEGER", "DOUBLE", "IF", "ELSE", "WHILE", "RETURN", "BREAK", "PLUS", 
		"MINUS", "DIV", "MULT", "OR", "AND", "NOT", "EQUAL", "NEQUAL", "GT", "LT", 
		"GTE", "LTE", "SEMICOLON", "LP", "RP", "LCB", "RCB", "COMMA", "ASSIGN", 
		"IDENTIFIER", "NUMBER", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MINIC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MINICParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MINICParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MINICParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompileUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MINICParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INTEGER || _la==DOUBLE) {
				{
				State = 32;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 30;
					declaration();
					}
					break;
				case 2:
					{
					State = 31;
					functionDefinition();
					}
					break;
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 37;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MINICParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MINICParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		int _la;
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39;
				typeSpecifier();
				State = 40;
				Match(IDENTIFIER);
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 41;
					initializer();
					}
				}

				State = 44;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MINICParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 4, RULE_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			Match(ASSIGN);
			State = 50;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MINICParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(MINICParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(MINICParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MINICParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FargsContext fargs() {
			return GetRuleContext<FargsContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			typeSpecifier();
			State = 53;
			Match(IDENTIFIER);
			State = 54;
			Match(LP);
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 55;
				fargs();
				}
				break;
			}
			State = 58;
			Match(RP);
			State = 59;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MINICParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(MINICParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(MINICParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FargsContext fargs() {
			return GetRuleContext<FargsContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			typeSpecifier();
			State = 62;
			Match(IDENTIFIER);
			State = 63;
			Match(LP);
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 64;
				fargs();
				}
				break;
			}
			State = 67;
			Match(RP);
			State = 68;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MINICParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MINICParser.DOUBLE, 0); }
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			_la = TokenStream.LA(1);
			if ( !(_la==INTEGER || _la==DOUBLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MINICParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MINICParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(MINICParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocalDeclarationContext localDeclaration() {
			return GetRuleContext<LocalDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 85;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case NOT:
			case LP:
			case IDENTIFIER:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				expression(0);
				State = 73;
				Match(SEMICOLON);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				ifStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 76;
				whileStatement();
				}
				break;
			case LCB:
				EnterOuterAlt(_localctx, 4);
				{
				State = 77;
				block();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 78;
				Match(RETURN);
				State = 79;
				expression(0);
				State = 80;
				Match(SEMICOLON);
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 6);
				{
				State = 82;
				Match(BREAK);
				State = 83;
				Match(SEMICOLON);
				}
				break;
			case INTEGER:
			case DOUBLE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 84;
				localDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MINICParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(MINICParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MINICParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LocalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalDeclarationContext localDeclaration() {
		LocalDeclarationContext _localctx = new LocalDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_localDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			typeSpecifier();
			State = 88;
			Match(IDENTIFIER);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 89;
				Match(ASSIGN);
				State = 90;
				expression(0);
				}
			}

			State = 93;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MINICParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(MINICParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(MINICParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MINICParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(IF);
			State = 96;
			Match(LP);
			State = 97;
			expression(0);
			State = 98;
			Match(RP);
			State = 99;
			block();
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 100;
				Match(ELSE);
				State = 101;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(MINICParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(MINICParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(MINICParser.RP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(WHILE);
			State = 105;
			Match(LP);
			State = 106;
			expression(0);
			State = 107;
			Match(RP);
			State = 108;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCB() { return GetToken(MINICParser.LCB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCB() { return GetToken(MINICParser.RCB, 0); }
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			Match(LCB);
			State = 111;
			statementList();
			State = 112;
			Match(RCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 22, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 114;
				statement();
				}
				}
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 826295278L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_PLUSMINUSContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MINICParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MINICParser.MINUS, 0); }
		public Expr_PLUSMINUSContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PLUSMINUS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_LTEContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTE() { return GetToken(MINICParser.LTE, 0); }
		public Expr_LTEContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_LTE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_ASSIGNContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MINICParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(MINICParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expr_ASSIGNContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_ASSIGN(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_LTContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MINICParser.LT, 0); }
		public Expr_LTContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_LT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_NUMBERContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MINICParser.NUMBER, 0); }
		public Expr_NUMBERContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_NUMBER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_NEQUALContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQUAL() { return GetToken(MINICParser.NEQUAL, 0); }
		public Expr_NEQUALContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_NEQUAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_PLUSContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MINICParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expr_PLUSContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PLUS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_EQUALContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(MINICParser.EQUAL, 0); }
		public Expr_EQUALContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_EQUAL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_GTContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MINICParser.GT, 0); }
		public Expr_GTContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_GT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_PARENTHESISContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(MINICParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(MINICParser.RP, 0); }
		public Expr_PARENTHESISContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_PARENTHESIS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_IDENTIFIERContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MINICParser.IDENTIFIER, 0); }
		public Expr_IDENTIFIERContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_IDENTIFIER(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_MINUSContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MINICParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expr_MINUSContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_MINUS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_FCALLContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MINICParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LP() { return GetToken(MINICParser.LP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RP() { return GetToken(MINICParser.RP, 0); }
		public Expr_FCALLContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_FCALL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_ORContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MINICParser.OR, 0); }
		public Expr_ORContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_OR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_DIVMULTContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MINICParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT() { return GetToken(MINICParser.MULT, 0); }
		public Expr_DIVMULTContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_DIVMULT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_NOTContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MINICParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expr_NOTContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_NOT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_GTEContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTE() { return GetToken(MINICParser.GTE, 0); }
		public Expr_GTEContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_GTE(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_ANDContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MINICParser.AND, 0); }
		public Expr_ANDContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_AND(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new Expr_NUMBERContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 120;
				Match(NUMBER);
				}
				break;
			case 2:
				{
				_localctx = new Expr_IDENTIFIERContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				_localctx = new Expr_FCALLContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 122;
				Match(IDENTIFIER);
				State = 123;
				Match(LP);
				State = 124;
				args();
				State = 125;
				Match(RP);
				}
				break;
			case 4:
				{
				_localctx = new Expr_PLUSContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127;
				Match(PLUS);
				State = 128;
				expression(13);
				}
				break;
			case 5:
				{
				_localctx = new Expr_MINUSContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 129;
				Match(MINUS);
				State = 130;
				expression(12);
				}
				break;
			case 6:
				{
				_localctx = new Expr_PARENTHESISContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131;
				Match(LP);
				State = 132;
				expression(0);
				State = 133;
				Match(RP);
				}
				break;
			case 7:
				{
				_localctx = new Expr_ASSIGNContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 135;
				Match(IDENTIFIER);
				State = 136;
				Match(ASSIGN);
				State = 137;
				expression(10);
				}
				break;
			case 8:
				{
				_localctx = new Expr_NOTContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 138;
				Match(NOT);
				State = 139;
				expression(9);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 172;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new Expr_DIVMULTContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 142;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 143;
						((Expr_DIVMULTContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DIV || _la==MULT) ) {
							((Expr_DIVMULTContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 144;
						expression(16);
						}
						break;
					case 2:
						{
						_localctx = new Expr_PLUSMINUSContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 145;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 146;
						((Expr_PLUSMINUSContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((Expr_PLUSMINUSContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 147;
						expression(15);
						}
						break;
					case 3:
						{
						_localctx = new Expr_ANDContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 148;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 149;
						Match(AND);
						State = 150;
						expression(9);
						}
						break;
					case 4:
						{
						_localctx = new Expr_ORContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 151;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 152;
						Match(OR);
						State = 153;
						expression(8);
						}
						break;
					case 5:
						{
						_localctx = new Expr_GTContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 154;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 155;
						Match(GT);
						State = 156;
						expression(7);
						}
						break;
					case 6:
						{
						_localctx = new Expr_GTEContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 157;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 158;
						Match(GTE);
						State = 159;
						expression(6);
						}
						break;
					case 7:
						{
						_localctx = new Expr_LTContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 160;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 161;
						Match(LT);
						State = 162;
						expression(5);
						}
						break;
					case 8:
						{
						_localctx = new Expr_LTEContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 163;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 164;
						Match(LTE);
						State = 165;
						expression(4);
						}
						break;
					case 9:
						{
						_localctx = new Expr_EQUALContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 166;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 167;
						Match(EQUAL);
						State = 168;
						expression(3);
						}
						break;
					case 10:
						{
						_localctx = new Expr_NEQUALContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 169;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 170;
						Match(NEQUAL);
						State = 171;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MINICParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MINICParser.COMMA, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 26, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 809517824L) != 0)) {
				{
				State = 177;
				expression(0);
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 178;
					Match(COMMA);
					State = 179;
					expression(0);
					}
					}
					State = 184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FargsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext[] typeSpecifier() {
			return GetRuleContexts<TypeSpecifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecifierContext typeSpecifier(int i) {
			return GetRuleContext<TypeSpecifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(MINICParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(MINICParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MINICParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MINICParser.COMMA, i);
		}
		public FargsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fargs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMINICVisitor<TResult> typedVisitor = visitor as IMINICVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFargs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FargsContext fargs() {
		FargsContext _localctx = new FargsContext(Context, State);
		EnterRule(_localctx, 28, RULE_fargs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTEGER || _la==DOUBLE) {
				{
				State = 187;
				typeSpecifier();
				State = 188;
				Match(IDENTIFIER);
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 189;
					Match(COMMA);
					State = 190;
					typeSpecifier();
					State = 191;
					Match(IDENTIFIER);
					}
					}
					State = 197;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 15);
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,31,201,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,1,0,5,0,33,8,0,10,0,12,0,36,9,0,1,0,1,0,1,1,1,1,1,1,3,1,43,8,1,1,1,
		1,1,1,1,3,1,48,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,57,8,3,1,3,1,3,1,3,
		1,4,1,4,1,4,1,4,3,4,66,8,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,86,8,6,1,7,1,7,1,7,1,7,3,7,92,8,7,1,7,
		1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,103,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
		10,1,10,1,10,1,10,1,11,4,11,116,8,11,11,11,12,11,117,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,3,12,141,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,5,12,173,8,12,10,12,12,12,176,
		9,12,1,13,1,13,1,13,5,13,181,8,13,10,13,12,13,184,9,13,3,13,186,8,13,1,
		14,1,14,1,14,1,14,1,14,1,14,5,14,194,8,14,10,14,12,14,197,9,14,3,14,199,
		8,14,1,14,0,1,24,15,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,0,3,1,0,1,
		2,1,0,10,11,1,0,8,9,221,0,34,1,0,0,0,2,47,1,0,0,0,4,49,1,0,0,0,6,52,1,
		0,0,0,8,61,1,0,0,0,10,70,1,0,0,0,12,85,1,0,0,0,14,87,1,0,0,0,16,95,1,0,
		0,0,18,104,1,0,0,0,20,110,1,0,0,0,22,115,1,0,0,0,24,140,1,0,0,0,26,185,
		1,0,0,0,28,198,1,0,0,0,30,33,3,2,1,0,31,33,3,8,4,0,32,30,1,0,0,0,32,31,
		1,0,0,0,33,36,1,0,0,0,34,32,1,0,0,0,34,35,1,0,0,0,35,37,1,0,0,0,36,34,
		1,0,0,0,37,38,5,0,0,1,38,1,1,0,0,0,39,40,3,10,5,0,40,42,5,28,0,0,41,43,
		3,4,2,0,42,41,1,0,0,0,42,43,1,0,0,0,43,44,1,0,0,0,44,45,5,21,0,0,45,48,
		1,0,0,0,46,48,3,6,3,0,47,39,1,0,0,0,47,46,1,0,0,0,48,3,1,0,0,0,49,50,5,
		27,0,0,50,51,3,24,12,0,51,5,1,0,0,0,52,53,3,10,5,0,53,54,5,28,0,0,54,56,
		5,22,0,0,55,57,3,28,14,0,56,55,1,0,0,0,56,57,1,0,0,0,57,58,1,0,0,0,58,
		59,5,23,0,0,59,60,5,21,0,0,60,7,1,0,0,0,61,62,3,10,5,0,62,63,5,28,0,0,
		63,65,5,22,0,0,64,66,3,28,14,0,65,64,1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,
		0,67,68,5,23,0,0,68,69,3,20,10,0,69,9,1,0,0,0,70,71,7,0,0,0,71,11,1,0,
		0,0,72,73,3,24,12,0,73,74,5,21,0,0,74,86,1,0,0,0,75,86,3,16,8,0,76,86,
		3,18,9,0,77,86,3,20,10,0,78,79,5,6,0,0,79,80,3,24,12,0,80,81,5,21,0,0,
		81,86,1,0,0,0,82,83,5,7,0,0,83,86,5,21,0,0,84,86,3,14,7,0,85,72,1,0,0,
		0,85,75,1,0,0,0,85,76,1,0,0,0,85,77,1,0,0,0,85,78,1,0,0,0,85,82,1,0,0,
		0,85,84,1,0,0,0,86,13,1,0,0,0,87,88,3,10,5,0,88,91,5,28,0,0,89,90,5,27,
		0,0,90,92,3,24,12,0,91,89,1,0,0,0,91,92,1,0,0,0,92,93,1,0,0,0,93,94,5,
		21,0,0,94,15,1,0,0,0,95,96,5,3,0,0,96,97,5,22,0,0,97,98,3,24,12,0,98,99,
		5,23,0,0,99,102,3,20,10,0,100,101,5,4,0,0,101,103,3,20,10,0,102,100,1,
		0,0,0,102,103,1,0,0,0,103,17,1,0,0,0,104,105,5,5,0,0,105,106,5,22,0,0,
		106,107,3,24,12,0,107,108,5,23,0,0,108,109,3,12,6,0,109,19,1,0,0,0,110,
		111,5,24,0,0,111,112,3,22,11,0,112,113,5,25,0,0,113,21,1,0,0,0,114,116,
		3,12,6,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,
		0,118,23,1,0,0,0,119,120,6,12,-1,0,120,141,5,29,0,0,121,141,5,28,0,0,122,
		123,5,28,0,0,123,124,5,22,0,0,124,125,3,26,13,0,125,126,5,23,0,0,126,141,
		1,0,0,0,127,128,5,8,0,0,128,141,3,24,12,13,129,130,5,9,0,0,130,141,3,24,
		12,12,131,132,5,22,0,0,132,133,3,24,12,0,133,134,5,23,0,0,134,141,1,0,
		0,0,135,136,5,28,0,0,136,137,5,27,0,0,137,141,3,24,12,10,138,139,5,14,
		0,0,139,141,3,24,12,9,140,119,1,0,0,0,140,121,1,0,0,0,140,122,1,0,0,0,
		140,127,1,0,0,0,140,129,1,0,0,0,140,131,1,0,0,0,140,135,1,0,0,0,140,138,
		1,0,0,0,141,174,1,0,0,0,142,143,10,15,0,0,143,144,7,1,0,0,144,173,3,24,
		12,16,145,146,10,14,0,0,146,147,7,2,0,0,147,173,3,24,12,15,148,149,10,
		8,0,0,149,150,5,13,0,0,150,173,3,24,12,9,151,152,10,7,0,0,152,153,5,12,
		0,0,153,173,3,24,12,8,154,155,10,6,0,0,155,156,5,17,0,0,156,173,3,24,12,
		7,157,158,10,5,0,0,158,159,5,19,0,0,159,173,3,24,12,6,160,161,10,4,0,0,
		161,162,5,18,0,0,162,173,3,24,12,5,163,164,10,3,0,0,164,165,5,20,0,0,165,
		173,3,24,12,4,166,167,10,2,0,0,167,168,5,15,0,0,168,173,3,24,12,3,169,
		170,10,1,0,0,170,171,5,16,0,0,171,173,3,24,12,2,172,142,1,0,0,0,172,145,
		1,0,0,0,172,148,1,0,0,0,172,151,1,0,0,0,172,154,1,0,0,0,172,157,1,0,0,
		0,172,160,1,0,0,0,172,163,1,0,0,0,172,166,1,0,0,0,172,169,1,0,0,0,173,
		176,1,0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,25,1,0,0,0,176,174,1,0,
		0,0,177,182,3,24,12,0,178,179,5,26,0,0,179,181,3,24,12,0,180,178,1,0,0,
		0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,186,1,0,0,0,184,
		182,1,0,0,0,185,177,1,0,0,0,185,186,1,0,0,0,186,27,1,0,0,0,187,188,3,10,
		5,0,188,195,5,28,0,0,189,190,5,26,0,0,190,191,3,10,5,0,191,192,5,28,0,
		0,192,194,1,0,0,0,193,189,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,
		196,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,198,187,1,0,0,0,198,199,1,
		0,0,0,199,29,1,0,0,0,17,32,34,42,47,56,65,85,91,102,117,140,172,174,182,
		185,195,198
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
